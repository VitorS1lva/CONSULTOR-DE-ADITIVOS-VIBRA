#UTF-8  LANG.: PT-BR
import sqlite3 #banco de dados
import tkinter #GUI
from tkinter import * #GUI
from tkinter import ttk #GUI
from PIL import ImageTk, Image #GUI
import base64 #GUI (imagens em B64)

#inicio do laço da aplicação
main_screen=Tk()

#funcionalidade dos botões da aplicação
class Funcs():
    def limpar_campos(self):
        self.add_entry_codigo.delete(0, END)
        self.add_entry_aditivo.delete(0, END)
        self.add_entry_deposito.delete(0, END)
        self.add_entry_estufa.delete(0, END)
        self.add_entry_transf.delete(0, END)
        self.add_entry_visc1.delete(0, END)
        self.add_entry_visc2.delete(0, END)
        self.add_entry_peso.delete(0, END)
        self.add_entry_dens.delete(0, END)

    def limpar_campos_pesquisa(self):
        self.ps_entry_codigo.delete(0, END)
        self.ps_entry_aditivo.delete(0, END)
        self.ps_entry_deposito.delete(0, END)
        self.ps_entry_estufa.delete(0, END)
        self.ps_entry_transf.delete(0, END)
        self.ps_entry_visc1.delete(0, END)
        self.ps_entry_visc2.delete(0, END)
        self.ps_entry_peso.delete(0, END)
        self.ps_entry_dens.delete(0, END)

    def conect_db(self):
        self.conect=sqlite3.connect('banco_adv.db')
        self.cursor=self.conect.cursor(); print('Conectando ao banco de dados')

    def desconect_db(self):
        self.conect.close()
        
    def montar_tabelas(self):
        self.conect_db()
        ### criar tabela de aditivos
        self.cursor.execute("""
             CREATE TABLE IF NOT EXISTS tabela_aditivos (
                 cod INTEGER PRIMARY KEY,
                 aditivo CHAR(40) NOT NULL,
                 deposito CHAR(40),
                 estufa CHAR(40),
                 transferencia CHAR(40),
                 visc1 CHAR(40),
                 visc2 CHAR(40),
                 peso INTEGER(20),
                 densidade INTEGER(20)
             );
         """)
        # validando informações no banco de dados
        self.conect.commit();
        print("Banco de dados criado")
        self.desconect_db()
        
    def var_insercoes(self):
        self.codigo=self.add_entry_codigo.get()
        self.aditivo = self.add_entry_aditivo.get()
        self.deposito = self.add_entry_deposito.get()
        self.estufa = self.add_entry_estufa.get()
        self.transf = self.add_entry_transf.get()
        self.visc1 = self.add_entry_visc1.get()
        self.visc2 = self.add_entry_visc2.get()
        self.peso = self.add_entry_peso.get()
        self.dens = self.add_entry_dens.get()
        
    def add_dados_db(self):
        #self.codigo=self.add_entry_codigo.get()
        self.var_insercoes()
        #chamando o sqlite3
        self.conect_db()

        self.cursor.execute(""" INSERT INTO tabela_aditivos (aditivo, deposito, estufa, transferencia, visc1, visc2, peso, densidade)
            VALUES (?, ?, ?, ?, ?, ?, ?,?)""", (self.aditivo, self.deposito, self.estufa, self.transf,
                                             self.visc1, self.visc2, self.peso, self.dens))
        self.conect.commit()
        self.desconect_db()
        self.busca_registro()
        self.limpar_campos()
        
    def busca_registro(self):
        self.conect_db()
        self.listaAdv.delete(*self.listaAdv.get_children())

        self.ps_entry_aditivo.insert(END, '%')
        nome = self.ps_entry_aditivo.get()
        self.cursor.execute(""" SELECT cod, aditivo, deposito, estufa, transferencia, visc1, visc2, peso, densidade
                            FROM tabela_aditivos WHERE aditivo LIKE '%s' ORDER BY aditivo ASC""" % nome)
        buscanomeAdv=self.cursor.fetchall()
        for i in buscanomeAdv:
            self.listaAdv.insert("", END, values=i)
        self.limpar_campos_pesquisa()
        self.desconect_db()

    def ondoubleclick(self, event):
        self.limpar_campos()
        self.limpar_campos_pesquisa()
        self.listaAdv.selection()

        for n in self.listaAdv.selection():
            col1, col2, col3, col4, col5, col6, col7, col8, col9 = self.listaAdv.item(n, 'values')
            self.add_entry_codigo.insert(END, col1)
            self.add_entry_aditivo.insert(END, col2)
            self.add_entry_deposito.insert(END, col3)
            self.add_entry_estufa.insert(END, col4)
            self.add_entry_transf.insert(END, col5)
            self.add_entry_visc1.insert(END, col6)
            self.add_entry_visc2.insert(END, col7)
            self.add_entry_peso.insert(END, col8)
            self.add_entry_dens.insert(END, col9)

            self.ps_entry_codigo.insert(END, col1)
            self.ps_entry_aditivo.insert(END, col2)
            self.ps_entry_deposito.insert(END, col3)
            self.ps_entry_estufa.insert(END, col4)
            self.ps_entry_transf.insert(END, col5)
            self.ps_entry_visc1.insert(END, col6)
            self.ps_entry_visc2.insert(END, col7)
            self.ps_entry_peso.insert(END, col8)
            self.ps_entry_dens.insert(END, col9)

    def deleta_campos(self):
        self.var_insercoes()
        self.conect_db()
        self.cursor.execute("""DELETE FROM tabela_aditivos WHERE cod=?""", [self.codigo])
        self.conect.commit()
        self.desconect_db()
        self.limpar_campos()
        self.limpar_campos_pesquisa()
        self.busca_registro()

    def alterar_campos(self):
        self.var_insercoes()
        self.conect_db()
        self.cursor.execute(""" UPDATE tabela_aditivos SET aditivo=?, deposito=?, estufa=?,
                            transferencia=?, visc1=?, visc2=?, peso=?, densidade=?
                            WHERE cod=? """, (self.aditivo, self.deposito, self.estufa, self.transf, self.visc1, self.visc2, self.peso, self.dens, self.codigo))
        self.conect.commit()
        self.desconect_db()
        self.busca_registro()
        self.limpar_campos()

    def imagens_64(self):
        self.logovibra=""
        self.icovibra=''

# estrutura da aplicação
class Application(Funcs):
    def __init__(self):
        self.imagens_64()
        self.main_screen=main_screen
        self.tela_principal_design()
        self.montar_tabelas()
        self.busca_registro()
        self.limpar_campos()
        self.deleta_campos()
        self.menu_bar()
        main_screen.mainloop()

        # design tela de adição
    def tela_principal_design(self):
        self.main_screen.title("ADIT-Mist")
        self.main_screen.geometry("550x650")
        self.main_screen.resizable(False, False)
        self.main_screen.configure(background='#007e44')
        self.main_screen.iconbitmap(self.icovibra)

        # logo lubrax
        self.vibrapng=PhotoImage(data=base64.b64decode(self.logovibra))
        self.icolabel=Label(self.main_screen, image=self.vibrapng, compound=tkinter.CENTER, background='#007e44')
        self.icolabel.place(relx=0.07, rely=0.88, relwidth=0.85, relheight=0.1)

        ## treeview
        self.listaAdv = ttk.Treeview(self.main_screen, columns=('col1', 'col2', 'col3', 'col4', 'col5', 'col6',
                                                                'col7', 'col8', 'col9'))
        self.listaAdv.place(relx=0.02, rely=0.375, relwidth=0.93, relheight=0.15)
        self.listaAdv.heading("#0", text='')
        self.listaAdv.heading("#1", text='ID')
        self.listaAdv.heading("#2", text='ADITIVO')
        self.listaAdv.heading("#3", text='DEPÓSITO')
        self.listaAdv.heading("#4", text='ESTUFA')
        self.listaAdv.heading("#5", text='TRANSF.')
        self.listaAdv.heading("#6", text='40ºC.')
        self.listaAdv.heading("#7", text='100ºC')                                                       
        self.listaAdv.heading("#8", text='PESO')
        self.listaAdv.heading("#9", text='DENSIDADE')      
        self.listaAdv.column("#0", width=0)
        self.listaAdv.column("#1", width=0)
        self.listaAdv.column("#2", width=40)
        self.listaAdv.column("#3", width=50)
        self.listaAdv.column("#4", width=40)
        self.listaAdv.column("#5", width=48)
        self.listaAdv.column("#6", width=45)
        self.listaAdv.column("#7", width=35)
        self.listaAdv.column("#8", width=30)
        self.listaAdv.column("#9", width=60)                                                       

        self.scrollistaadvver=Scrollbar(self.main_screen, orient='vertical')
        self.scrollistaadvver.place(relx=0.95, rely=0.375, relheight=0.15, relwidth=0.025)
        self.listaAdv.configure(yscroll=self.scrollistaadvver.set)
        self.listaAdv.bind("<Double-1>", self.ondoubleclick) #referência do tipo de interação que estamos fazendo

        # frame e botoes de adição
        self.frame_botoes = Frame(self.main_screen, bg='#007e44')
        self.frame_botoes.place(relx=0.00, rely=0.06, relwidth=0.96, relheight=0.3)
        self.label_principal=Label(self.main_screen,text='ADICIONAR ADITIVOS', bg='#007e44', fg='white')
        self.label_principal.place(relx=0.01, rely=0.02, relwidth=0.25, relheight=0.02)
        self.botao_inserir = Button(self.frame_botoes, text='INSERIR', command=self.add_dados_db, bd=3, bg='#0d663d', fg='white', font=('arial', 10, 'bold'))
        self.botao_inserir.place(relx=0.78, rely=0.001, relwidth=0.2, relheight=0.2)
        self.botao_excluir = Button(self.frame_botoes, text='EXCLUIR', command=self.deleta_campos, bd=3, bg='#0d663d', fg='white', font=('arial', 10, 'bold'))
        self.botao_excluir.place(relx=0.78, rely=0.25, relwidth=0.2, relheight=0.2)
        self.botao_editar = Button(self.frame_botoes, text='EDITAR', command=self.alterar_campos, bd=3, bg='#0d663d', fg='white', font=('arial', 10, 'bold'))
        self.botao_editar.place(relx=0.78, rely=0.52, relwidth=0.2, relheight=0.2)
        self.botao_limpar = Button(self.frame_botoes, text='LIMPAR', command=self.limpar_campos, bd=3, bg='#0d663d', fg='white', font=('arial', 10, 'bold'))
        self.botao_limpar.place(relx=0.78, rely=0.78, relwidth=0.2, relheight=0.2)

        ## entrys, labels e dropdown boxes
        self.add_entry_codigo=Entry(self.frame_botoes, bg='#007e44')
        self.add_entry_codigo.place(relx=0.35, rely=0.001, relwidth=0.20, relheight=0.1)

        self.aditivo_label_add=Label(self.frame_botoes, text='ADITIVO: ', background='#007e44', foreground='white')
        self.aditivo_label_add.place(relx=0.09, rely=0.001, relheight=0.1, relwidth=0.1)
        self.add_entry_aditivo=Entry(self.frame_botoes)
        self.add_entry_aditivo.place(relx=0.29, rely=0.001, relwidth=0.47, relheight=0.1)

        self.deposito_label_add = Label(self.frame_botoes, text='DEPÓSITO:', background='#007e44', foreground='white')
        self.deposito_label_add.place(relx=0.09, rely=0.18, relheight=0.05, relwidth=0.11)
        self.add_entry_deposito = Entry(self.frame_botoes)
        self.add_entry_deposito.place(relx=0.29, rely=0.16, relwidth=0.47, relheight=0.1)

        self.estufa_label_add = Label(self.frame_botoes, text='ESTUFA:', background='#007e44', foreground='white')
        self.estufa_label_add.place(relx=0.09, rely=0.3, relheight=0.1, relwidth=0.082)
        self.add_entry_estufa = Entry(self.frame_botoes)
        self.add_entry_estufa.place(relx=0.29, rely=0.3, relwidth=0.47, relheight=0.1)

        self.transf_label_add = Label(self.frame_botoes, text='TRANSFERÊNCIA:', background='#007e44', foreground='white')
        self.transf_label_add.place(relx=0.08, rely=0.445, relheight=0.1, relwidth=0.20)
        self.add_entry_transf = Entry(self.frame_botoes)
        self.add_entry_transf.place(relx=0.29, rely=0.445, relwidth=0.47, relheight=0.1)

        self.visc_label=Label(self.frame_botoes, text='VISCOSIDADE:', background='#007e44', foreground='white')
        self.visc_label.place(relx=0.019, rely=0.59, relheight=0.1, relwidth=0.3)
        self.visc1_label_add = Label(self.frame_botoes, text='40ºC:', background='#007e44', foreground='white')
        self.visc1_label_add.place(relx=0.27, rely=0.59, relheight=0.1, relwidth=0.1)
        self.add_entry_visc1 = Entry(self.frame_botoes)
        self.add_entry_visc1.place(relx=0.36, rely=0.59, relwidth=0.15, relheight=0.1)

        self.visc2_label_add = Label(self.frame_botoes, text='100ºC:', background='#007e44', foreground='white')
        self.visc2_label_add.place(relx=0.515, rely=0.59, relheight=0.1, relwidth=0.1)
        self.add_entry_visc2 = Entry(self.frame_botoes)
        self.add_entry_visc2.place(relx=0.61, rely=0.59, relwidth=0.15, relheight=0.1)

        self.peso_label_add = Label(self.frame_botoes, text='PESO:', background='#007e44', foreground='white')
        self.peso_label_add.place(relx=0.075, rely=0.74, relheight=0.1, relwidth=0.1)
        self.add_entry_peso = Entry(self.frame_botoes)
        self.add_entry_peso.place(relx=0.29, rely=0.74, relwidth=0.47, relheight=0.1)

        self.dens_label_add = Label(self.frame_botoes, text='DENSIDADE:', background='#007e44', foreground='white')
        self.dens_label_add.place(relx=0.092, rely=0.88, relheight=0.1, relwidth=0.13)
        self.add_entry_dens = Entry(self.frame_botoes)
        self.add_entry_dens.place(relx=0.29, rely=0.88, relwidth=0.47, relheight=0.1)

        ### frame de pesquisa
        ###.# display de pesquisa 
        self.frame_pesquisa=Frame(self.main_screen, bg='#007e44')
        self.frame_pesquisa.place(relx=0.00, rely=0.55, relwidth=0.96, relheight=0.3)

        ###.## botão de pesquisa 
        self.botao_pesquisar = Button(self.frame_pesquisa, text='PESQUISAR', command= self.busca_registro, bd=3,
                                      bg='#0d663d', fg='white', font=('arial', 10, 'bold'))
        self.botao_pesquisar.place(relx=0.78, rely=0.001, relwidth=0.2, relheight=0.2)

        self.botao_limpar = Button(self.frame_pesquisa, text='LIMPAR', command=self.limpar_campos_pesquisa, bd=3, bg='#0d663d', fg='white', font=('arial', 10, 'bold'))
        self.botao_limpar.place(relx=0.78, rely=0.3, relwidth=0.2, relheight=0.2)
       
        ###.#### label de entry
        self.ps_entry_codigo=Entry(self.frame_pesquisa, bg='#007e44')
        self.ps_entry_codigo.place(relx=0.35, rely=0.001, relwidth=0.20, relheight=0.1)

        self.ps_label_add=Label(self.frame_pesquisa, text='ADITIVO: ', background='#007e44', foreground='white')
        self.ps_label_add.place(relx=0.09, rely=0.001, relheight=0.1, relwidth=0.1)
        self.ps_entry_aditivo=Entry(self.frame_pesquisa)
        self.ps_entry_aditivo.place(relx=0.29, rely=0.001, relwidth=0.47, relheight=0.1)

        self.ps_label_add = Label(self.frame_pesquisa, text='DEPÓSITO:', background='#007e44', foreground='white')
        self.ps_label_add.place(relx=0.09, rely=0.18, relheight=0.05, relwidth=0.11)
        self.ps_entry_deposito = Entry(self.frame_pesquisa)
        self.ps_entry_deposito.place(relx=0.29, rely=0.16, relwidth=0.47, relheight=0.1)

        self.ps_label_add = Label(self.frame_pesquisa, text='ESTUFA:', background='#007e44', foreground='white')
        self.ps_label_add.place(relx=0.09, rely=0.3, relheight=0.1, relwidth=0.082)
        self.ps_entry_estufa = Entry(self.frame_pesquisa)
        self.ps_entry_estufa.place(relx=0.29, rely=0.3, relwidth=0.47, relheight=0.1)

        self.ps_label_transf = Label(self.frame_pesquisa, text='TRANSFERÊNCIA:', background='#007e44', foreground='white')
        self.ps_label_transf.place(relx=0.08, rely=0.445, relheight=0.1, relwidth=0.20)
        self.ps_entry_transf = Entry(self.frame_pesquisa)
        self.ps_entry_transf.place(relx=0.29, rely=0.445, relwidth=0.47, relheight=0.1)

        self.ps_label=Label(self.frame_pesquisa, text='VISCOSIDADE:', background='#007e44', foreground='white')
        self.ps_label.place(relx=0.019, rely=0.59, relheight=0.1, relwidth=0.3)
        self.visc1_label_ps = Label(self.frame_pesquisa, text='40ºC:', background='#007e44', foreground='white')
        self.visc1_label_ps.place(relx=0.27, rely=0.59, relheight=0.1, relwidth=0.1)
        self.ps_entry_visc1 = Entry(self.frame_pesquisa)
        self.ps_entry_visc1.place(relx=0.36, rely=0.59, relwidth=0.15, relheight=0.1)

        self.visc2_label_ps = Label(self.frame_pesquisa, text='100ºC:', background='#007e44', foreground='white')
        self.visc2_label_ps.place(relx=0.515, rely=0.59, relheight=0.1, relwidth=0.1)
        self.ps_entry_visc2 = Entry(self.frame_pesquisa)
        self.ps_entry_visc2.place(relx=0.61, rely=0.59, relwidth=0.15, relheight=0.1)

        self.peso_label_ps = Label(self.frame_pesquisa, text='PESO:', background='#007e44', foreground='white')
        self.peso_label_ps.place(relx=0.075, rely=0.74, relheight=0.1, relwidth=0.1)
        self.ps_entry_peso = Entry(self.frame_pesquisa)
        self.ps_entry_peso.place(relx=0.29, rely=0.74, relwidth=0.47, relheight=0.1)

        self.dens_label_ps = Label(self.frame_pesquisa, text='DENSIDADE:', background='#007e44', foreground='white')
        self.dens_label_ps.place(relx=0.092, rely=0.88, relheight=0.1, relwidth=0.13)
        self.ps_entry_dens = Entry(self.frame_pesquisa)
        self.ps_entry_dens.place(relx=0.29, rely=0.88, relwidth=0.47, relheight=0.1)


    #### menu bar

    def menu_bar(self):
        menubar=Menu(self.main_screen)
        self.main_screen.config(menu=menubar)
        filemenu=Menu(menubar, background='#007e44', foreground='white', border=1, tearoff=0)
        filemenu2=Menu(menubar, background='#007e44', foreground='white', relief='flat', border=1, tearoff=0)

        def Quit(): self.main_screen.destroy()

        menubar.add_cascade(label="Opções", menu=filemenu)
        menubar.add_cascade(label="Sobre", menu=filemenu2)

        filemenu.add_command(label="Sair", command=Quit)
        filemenu2.add_command(label="Versão do programa = 1.0")
        filemenu2.add_command(label="Python, 3.10 (Libraries: TKinter, MySql)")
        filemenu2.add_command(label="Código idealizado por: Vitor Roque (Op.3)")
        filemenu2.add_command(label="Código realizado por: Vitor Pereira (Software Developer)")

# mantendo loop da janela
Application()
